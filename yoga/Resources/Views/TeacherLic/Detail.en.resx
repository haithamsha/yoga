<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
    <comment/>
  </data>
  <data name="TeacherLicenceIssue" xml:space="preserve">
    <value>Teacher Licence Issue</value>
    <comment/>
  </data>
  <data name="Expreience" xml:space="preserve">
    <value>Expreience</value>
    <comment/>
  </data>
  <data name="BasicInformation" xml:space="preserve">
    <value>Basic Information</value>
    <comment/>
  </data>
  <data name="Fees" xml:space="preserve">
    <value>Fees</value>
    <comment/>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
    <comment/>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
    <comment/>
  </data>
  <data name="EducationLevel" xml:space="preserve">
    <value>Education Level</value>
    <comment/>
  </data>
  <data name="SocialMediaAccounts" xml:space="preserve">
    <value>Social Media Accounts</value>
    <comment/>
  </data>
  <data name="PersonalWebSite" xml:space="preserve">
    <value>Personal WebSite</value>
    <comment/>
  </data>
  <data name="TeachingType" xml:space="preserve">
    <value>Teaching Type</value>
    <comment/>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
    <comment/>
  </data>
  <data name="ExpYears" xml:space="preserve">
    <value>ExpYears</value>
    <comment/>
  </data>
  <data name="AccreditedHours" xml:space="preserve">
    <value>Accredited Hours</value>
    <comment/>
  </data>
  <data name="SchoolLocation" xml:space="preserve">
    <value>School Location</value>
    <comment/>
  </data>
  <data name="CertaficateDate" xml:space="preserve">
    <value>Certaficate Date</value>
    <comment/>
  </data>
  <data name="SchoolName" xml:space="preserve">
    <value>School Name</value>
    <comment/>
  </data>
  <data name="SchoolLink" xml:space="preserve">
    <value>School Link</value>
    <comment/>
  </data>
  <data name="SchoolSocialMediaAccount" xml:space="preserve">
    <value>School Social Media Account</value>
    <comment/>
  </data>
  <data name="CertficateFiles" xml:space="preserve">
    <value>Certficate Files</value>
    <comment/>
  </data>
  <data name="ExamFees" xml:space="preserve">
    <value>Exam Fees</value>
    <comment/>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning: User send the receit but you not approve yet, so please approve.</value>
    <comment/>
  </data>
  <data name="TeacherPay" xml:space="preserve">
    <value>Teacher pay the exam fees, check the below receit</value>
    <comment/>
  </data>
  <data name="NotPaidYet" xml:space="preserve">
    <value>Not Paid Yet.</value>
    <comment/>
  </data>
  <data name="LicenceFees" xml:space="preserve">
    <value>LicenceFees</value>
    <comment/>
  </data>
  <data name="WarningApprove" xml:space="preserve">
    <value>Warning: User send the receit but you not approve yet, so please approve.</value>
    <comment/>
  </data>
  <data name="InformationCompleted" xml:space="preserve">
    <value>Information Completed</value>
    <comment/>
  </data>
  <data name="PayExamFees" xml:space="preserve">
    <value>Pay Exam Fees</value>
    <comment/>
  </data>
  <data name="TakeTheExam" xml:space="preserve">
    <value>Take The Exam</value>
    <comment/>
  </data>
  <data name="PassTheExam" xml:space="preserve">
    <value>Pass The Exam</value>
    <comment/>
  </data>
  <data name="PayLicenceFees" xml:space="preserve">
    <value>Pay Licence Fees</value>
    <comment/>
  </data>
  <data name="Pending" xml:space="preserve">
    <value>Pending</value>
    <comment/>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
    <comment/>
  </data>
  <data name="Markasapproved" xml:space="preserve">
    <value>Mark as approved</value>
    <comment/>
  </data>
  <data name="MarkasRejected" xml:space="preserve">
    <value>Mark as Rejected</value>
    <comment/>
  </data>
  <data name="Rejected" xml:space="preserve">
    <value>Rejected</value>
    <comment/>
  </data>
  <data name="Approved" xml:space="preserve">
    <value>Approved</value>
    <comment/>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment/>
  </data>
  <data name="Markaspaidexamfees" xml:space="preserve">
    <value>Mark as paid exam fees</value>
    <comment/>
  </data>
  <data name="RejectPayment" xml:space="preserve">
    <value>Reject Payment</value>
    <comment/>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
    <comment/>
  </data>
  <data name="ExamDetails" xml:space="preserve">
    <value>Exam Details (Location And Date)</value>
    <comment/>
  </data>
  <data name="Markastaketheexam" xml:space="preserve">
    <value>Mark as take the exam</value>
    <comment/>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment/>
  </data>
  <data name="Markaspasstheexam" xml:space="preserve">
    <value>Mark as pass the exam</value>
    <comment/>
  </data>
  <data name="NotPassed" xml:space="preserve">
    <value>Not Passed</value>
    <comment/>
  </data>
  <data name="PleaseInsertLicenseFees" xml:space="preserve">
    <value>Please Insert License Fees</value>
    <comment/>
  </data>
  <data name="MarkaspaidLicensefees" xml:space="preserve">
    <value>Mark as paid License fees</value>
    <comment/>
  </data>
  <data name="Approve" xml:space="preserve">
    <value>Approve</value>
    <comment/>
  </data>
  <data name="RejectReason" xml:space="preserve">
    <value>Reject Reason</value>
    <comment/>
  </data>
  <data name="Reject" xml:space="preserve">
    <value>Reject</value>
    <comment/>
  </data>
  <data name="Agree" xml:space="preserve">
    <value>Agree on Terms and Conditions and Acknowledged</value>
    <comment/>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Teacher License</value>
    <comment/>
  </data>
</root>